print("This is a code block!")
print("This is a code block!")
print("This is a code block!")
print("This is a code block too!")
print("This is a code block!")
print("This is a code block too!")
print("This is a code block too!")
getwd()
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("/Users/erosmendoza/Documents/qbio_490_erosmendoza"))
var_string <- "hello world!"
var_num <- 23
var_vector <- c(3, 2, 1)
## Create a new variable my_var to store anything you choose:
my_var <- 490
print(my_var)
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- TRUE
false_var <- FALSE
## numeric is a catch all for any number value in R
negative <- -1
decimal <- 5.5
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "This is QBIO490's Spring 2024 class!"
char_var <- "c"
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c(4,4,5,6,7)
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
## add code here!
name <- "Eros Mendoza"
age <- 20
birthday <- "03/21/2003"
three_fav_colors <-c("red","green", "blue")
print(name)
print(age)
print(birthday)
print(three_fav_colors)
typeof(name)
typeof(age)
typeof(birthday)
typeof(three_fav_colors)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
## call functions here
sum(list_of_numbers)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
## call functions here
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
## call functions here
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
summary(list_of_numbers)
"QBIO" == "QBIO" ## is equal to
"USC" != "UCLA" ## is not equal to
10 > 9 ## greater than
1 < 2 ## less than
8 >= 3 ## greater than or equal to
4 <= 7 ## less than or equal to
100 %in% c(10, 100, 1000, 10000) ## is present in a vector/list
"cat" == "cat" & "dog" == "dog" # prediction: TRUE
"cat" == "cat" & "fish" == "hamster" # prediction: FALSE
1 < 2 | 3 < 1 # prediction: FALSE
1 < 2 | 3 < 5 # prediction: TRUE
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
# prediction: TRUE
"cat" == "cat" & "dog" == "dog" # prediction: TRUE
"cat" == "cat" & "fish" == "hamster" # prediction: FALSE
1 < 2 | 3 < 1 # prediction: TRUE
1 < 2 | 3 < 5 # prediction: TRUE
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
# prediction: TRUE
x <- 7
if (x > 10) {
# action
print("Value is greater than 10!")
} else if (x < 10) {
# action
print("Value is less than 10!")
} else {
# action
print("Value is equal to 10!")
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
}
i = 1
while (i < 10) {
print(i)
i = i + 2
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
print(mean)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
print(mean)
x = x + 1
my_list <- c(1, 10, x)
mean <- mean(my_list)
}
list <- c(2, 4, 6, 8)
for (element in list) { # note that I can call "element" whatever I want, it like a temporary variable that stores the list's item
print (element * 2)
}
list <- c(1, 5, 20, 0)
# write loop here
for(element in list) {
print (element * element * element)
}
for (i in 1:10) {
# do something
print(i)
}
# write loop here
for (i in -7:7) {
print (i)
}
vector <- c("CSCI102", "CSCI103", "CSCI104")
vector[3] ## remember that R is a one indexed language, so we start counting from 1 (not 0)
vector <- 1:10^6 # here's a huge vector (all numbers between 1 and 10^6)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
loop_sum(vector) == function_sum # tests that these are equal
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
data(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
head(mtcars) # just like in the terminal, you can use head to view the first few rows of a data frame
str(mtcars) # str stands for structure
# add code here
mtcars$mpg
# call functions here
colnames(mtcars)
rownames(mtcars)
#mtcars$ # fill in name of carburetor column here
# call functions here
colnames(mtcars)
rownames(mtcars)
mtcars$carb # fill in name of carburetor column here
View(mtcars)
# write code here
rownames("Duster 360")
# write code here
rownames(mtcars)
rownames(mtcars)
colnames(mtcars)
# write code here
rownames(mtcars)
colnames(mtcars)
car_names <- c("Duster 360", "Lincoln Continental", "Maserati Bora")
car_rows <- rownames(mtcars) %int% car_names
# write code here
rownames(mtcars)
colnames(mtcars)
car_names <- c("Duster 360", "Lincoln Continental", "Maserati Bora")
car_rows <- rownames(mtcars) %in% car_names
# write code here
rownames(mtcars)
colnames(mtcars)
car_names <- c("Duster 360", "Lincoln Continental", "Maserati Bora")
mtcars[car_names, "hp"]
# write code here
#rownames(mtcars)
#colnames(mtcars)
car_names <- c("Duster 360", "Lincoln Continental", "Maserati Bora")
mtcars[car_names, "hp"]
# write code here
mtcars$transmission <- ifelse(mtcars$am == 0, "automatic", "manual")
mtcars$transmission
# write code here
mtcars_cpy
# write code here
mtcars_cpy <- mtcars[, -(colnames(mtcars) == "am")]
# write code here
mtcars_cpy
# write code here
mtcars_cpy <- mtcars[, -(colnames(mtcars) == "am")]
# write code here
mtcars_cpy
# write code here
mtcars_cpy
# write code here
colnames(mtcars_cpy)
# write code here
mtcars_cpy <- mtcars[, !(colnames(mtcars) == "am")]
# write code here
colnames(mtcars_cpy)
# write code here
mtcars
# write code here
#mtcars
mtcars_cpy
# write code here
help("is.na")
